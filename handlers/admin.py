import asyncio
from aiogram import types
from aiogram.dispatcher import Dispatcher
import re
from datetime import datetime

from db import (
    Vacancy,
    Review,
    enable_or_disable_admin,
    get_random_review,
    get_review_by_id,
)
from keyboards import resolve_review_kb
from main import send_vacancy
from SETTINGS import bot
from utils.general import strong, admin_only
from utils.prefetch_vacancy import prefetch_vacancy


@admin_only(superadmin=True)
async def enable_or_disable_admin_handler(message: types.Message):
    command, telegram_id = re.split(r"\s+", message.text)
    command = True if command.strip("/") == "enable_admin" else False

    if telegram_id:
        try:
            telegram_id = int(telegram_id)
        except:
            await message.answer(
                "–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π Telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: @getmyid_bot"
            )

        try:
            await enable_or_disable_admin(telegram_id=telegram_id, is_admin=command)
            await message.answer("üëå –ò–∑–º–µ–Ω–µ–Ω–æ")
        except:
            text = [
                "–î–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/registration)",
                " –≤ –±–æ—Ç–µ —Å–æ —Å–≤–æ–µ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏",
            ]
            await message.answer("".join(text))

    else:
        await message.answer(
            "–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π Telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: @getmyid_bot"
        )


@admin_only()
async def get_review_to_resolve_handler(message: types.Message):
    review: Review = await get_random_review()

    await message.answer(
        f"<strong>–û—Ç–∑—ã–≤</strong>:\n{review.description}\n\nID –æ—Ç–∑—ã–≤–∞: {review.id}",
        parse_mode=types.ParseMode.HTML,
        reply_markup=resolve_review_kb.get_kb(),
    )


@admin_only()
async def resolve_review_handler(query: types.CallbackQuery):
    """–ü–æ–º–µ—á–∞–µ—Ç Review –∫–∞–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏,
    –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç —é–∑–µ—Ä–∞-—Ä–µ–≤—å—é–µ—Ä–∞ –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏"""
    review_id: str = re.findall(r"ID –æ—Ç–∑—ã–≤–∞: \d+", query.message.text)[0]
    review_id: int = int(re.split(r"ID –æ—Ç–∑—ã–≤–∞: ", review_id)[1])
    review: Review = await get_review_by_id(review_id=review_id)

    await review.resolve(
        admin_telegram_id=query.from_user.id, resolution_date=datetime.now()
    )

    await bot.edit_message_text(
        f"üëå –†–∞–∑—Ä–µ—à–µ–Ω–æ", query.from_user.id, query.message.message_id
    )

    await asyncio.sleep(10)
    await query.message.delete()


@admin_only()
async def custom_vacancy(message: types.Message):
    response = []

    try:
        validated_vacancy: Vacancy = await prefetch_vacancy(
            vacancy_text=message.text, from_admin=True
        )
        await send_vacancy(vacancy=validated_vacancy)

    except BaseException as e:
        response = [
            f"{e}\n",
            f'–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é {strong("—Å—Ç—Ä–æ–≥–æ –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ")}',
            f'‚Ä¢ {strong("id")}: id –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –¥–ª–∏–Ω–æ–π –¥–æ 10 —Ü–∏—Ñ—Ä. –í–≤–æ–¥–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /vacancy',
            f'‚Ä¢ {strong("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")}: –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä "–ú–ª–∞–¥—à–∏–π —é—Ä–∏—Å—Ç –≤ –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∞"',
            f'‚Ä¢ {strong("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è")}',
            f'‚Ä¢ {strong("–¢–∏–ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è")}: "–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥" –∏–ª–∏ "–∏–Ω—Ö–∞—É—Å"',
            f'‚Ä¢ {strong("–û–ø—ã—Ç")}: —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏:'
            f'"0" (–±–µ–∑ –æ–ø—ã—Ç–∞) –∏–ª–∏ "1-3" (1-3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞)',
            f'‚Ä¢ {strong("–ó–∞—Ä–ø–ª–∞—Ç–∞")}: –∑–∞—Ä–ø–ª–∞—Ç–∞/–∑–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –≤–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∏—Å–ª–æ - —á–∏—Å–ª–æ", "–æ—Ç —á–∏—Å–ª–æ" –∏–ª–∏ "–¥–æ —á–∏—Å–ª–æ"',
            f'‚Ä¢ {strong("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")} –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 3900 —Å–∏–º–≤–æ–ª–æ–≤.',
        ]

        await message.answer(text="\n".join(response), parse_mode=types.ParseMode.HTML)


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(
        enable_or_disable_admin_handler, commands=["enable_admin", "disable_admin"]
    )
    dp.register_message_handler(get_review_to_resolve_handler, commands=["get_review"])
    dp.register_callback_query_handler(
        resolve_review_handler, resolve_review_kb.cb.filter()
    )
    dp.register_message_handler(custom_vacancy, commands=["vacancy"])
