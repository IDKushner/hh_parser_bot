from db import Vacancy
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData


class KB:
    """–ü—Ä–∏ multiselect=True —Å–æ–∑–¥–∞—ë—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä:
    - –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ = –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
    - –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ (–µ—ë button_name –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ data –≤ —Ñ—É–Ω–∫—Ü–∏—é get_kb),
    —Ç–æ –ø–µ—Ä–µ–¥ –Ω–µ–π –ø–æ—è–≤–ª—è–µ—Ç—Å—è check_symbol
    - –≤—ã–±–æ—Ä –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É -- —Ç–æ–≥–¥–∞ check_symbol –ø—Ä–æ–ø–∞–¥–µ—Ç
    - –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
    - –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏, –∏—Ç–µ—Ä–∏—Ä—É—è—Å—å –ø–æ —Å–ø–∏—Å–∫—É button_names
    - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä CallbackData —Å–æ–∑–¥–∞—ë—Ç cb —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º button_id,
    –æ–∑–Ω–∞—á–∞—é—â–∏–º –∏–Ω–¥–µ–∫—Å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ (button_name) –≤ —Å–ø–∏—Å–∫–µ button_names. button_id –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å,
    —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ button_names —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–æ
    - —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ cb —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é: example_kb.cb
    """

    # –¥–æ–±–∞–≤–∏—Ç—å save_button_callback + –¥–æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º state'–µ –≤–∞—à–µ–π FSM, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π state
    def __init__(
        self,
        button_names: list,
        cb_name: str,
        multiselect: bool = False,
        save_button_cb_name: str = None,
        check_symbol: str = "‚úì",
    ):
        self.button_names = button_names
        self.cb = CallbackData(cb_name, "button_id")
        self.multiselect = multiselect

        if self.multiselect:
            try:
                self.save_button_cb = CallbackData(save_button_cb_name)
            except:
                raise ValueError(
                    """If multiselect is True, you must specify save_button_cb_name 
                                 to have smooth transition between FSM states"""
                )

        self.check_symbol = check_symbol

    def make_button(
        self, button_name: str, button_id: int, checked: bool = False
    ) -> InlineKeyboardButton:
        button_name = "‚úì" + button_name if checked else button_name

        return InlineKeyboardButton(
            text=button_name, callback_data=self.cb.new(button_id=str(button_id))
        )

    def get_kb(self, data: list = []) -> InlineKeyboardMarkup:
        if not self.multiselect or (self.multiselect and not data):
            kb = InlineKeyboardMarkup()
            for index in range(len(self.button_names)):
                button_name = self.button_names[index]
                kb.add(self.make_button(button_name=button_name, button_id=index))

        if self.multiselect and data:
            kb = InlineKeyboardMarkup()
            for index in range(len(self.button_names)):
                button_name = self.button_names[index]
                if button_name in data:
                    kb.add(
                        self.make_button(
                            button_name=button_name, button_id=index, checked=True
                        )
                    )
                else:
                    kb.add(self.make_button(button_name=button_name, button_id=index))

            kb.add(
                InlineKeyboardButton(
                    text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=self.save_button_cb.new()
                )
            )

        return kb


all_experience_types = ["–ú–µ–Ω—å—à–µ 1 –≥–æ–¥–∞", "1-3 –≥–æ–¥–∞"]
experience_kb = KB(button_names=all_experience_types, cb_name="experience_cb")

all_salary_types = ["–û—Ç 15 000", "–û—Ç 30 000", "–û—Ç 50 000", "–û—Ç 70 000", "–û—Ç 100 000"]
salary_kb = KB(button_names=all_salary_types, cb_name="salary_cb")

all_tags = [
    "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
    "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤",
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ",
    "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
    "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
]
tags_kb = KB(
    button_names=all_tags,
    multiselect=True,
    cb_name="tags_cb",
    save_button_cb_name="save_tags",
)

# –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è
all_desired_employer_types = ["–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥", "–ò–Ω—Ö–∞—É—Å"]
desired_employer_types_kb = KB(
    button_names=all_desired_employer_types,
    multiselect=True,
    cb_name="desired_employer_types_cb",
    save_button_cb_name="save_desired_employer_types_ids",
)

resolve_review_kb = KB(button_names=["–†–∞–∑—Ä–µ—à–∏—Ç—å"], cb_name="resolve_review_cb")

desc_cb = CallbackData("desc", "description")


def vacancy_kb_show_desc(vacancy: Vacancy) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                    callback_data=desc_cb.new(description="show"),
                )
            ]
        ]
    )

    if vacancy.url:
        kb.add(InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=vacancy.url))

    return kb


def vacancy_kb_hide_desc(vacancy: Vacancy) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–°–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                    callback_data=desc_cb.new(description="hide"),
                )
            ]
        ]
    )

    if vacancy.url:
        kb.add(InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=vacancy.url))

    return kb
